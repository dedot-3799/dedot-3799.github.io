function isPrimeNumber_r5(n, id, mx) {
    let [num, threadId, max] = [BigInt(n), Number(id), Number(mx)]
    // n:Number to be determined, id:threadsID, mx:Total number of threads
    let prime = [23n,29n,31n,37n,41n,43n,47n,53n,59n,61n,67n,71n,73n,79n,83n,89n,97n,101n,103n,107n,109n,113n,127n,131n,137n,139n,149n,151n,157n,163n,167n,173n,179n,181n,191n,193n,197n,199n,211n,223n,227n,229n,233n,239n,241n,251n,257n,263n,269n,271n,277n,281n,283n,293n,307n,311n,313n,317n,331n,337n,347n,349n,353n,359n,367n,373n,379n,383n,389n,397n,401n,409n,419n,421n,431n,433n,439n,443n,449n,457n,461n,463n,467n,479n,487n,491n,499n,503n,509n,521n,523n,541n,547n,557n,563n,569n,571n,577n,587n,593n,599n,601n,607n,613n,617n,619n,631n,641n,643n,647n,653n,659n,661n,673n,677n,683n,691n,701n,709n,719n,727n,733n,739n,743n,751n,757n,761n,769n,773n,787n,797n,809n,811n,821n,823n,827n,829n,839n,853n,857n,859n,863n,877n,881n,883n,887n,907n,911n,919n,929n,937n,941n,947n,953n,967n,971n,977n,983n,991n,997n,1009n,1013n,1019n,1021n,1031n,1033n,1039n,1049n,1051n,1061n,1063n,1069n,1087n,1091n,1093n,1097n,1103n,1109n,1117n,1123n,1129n,1151n,1153n,1163n,1171n,1181n,1187n,1193n,1201n,1213n,1217n,1223n,1229n,1231n,1237n,1249n,1259n,1277n,1279n,1283n,1289n,1291n,1297n,1301n,1303n,1307n,1319n,1321n,1327n,1361n,1367n,1373n,1381n,1399n,1409n,1423n,1427n,1429n,1433n,1439n,1447n,1451n,1453n,1459n,1471n,1481n,1483n,1487n,1489n,1493n,1499n,1511n,1523n,1531n,1543n,1549n,1553n,1559n,1567n,1571n,1579n,1583n,1597n,1601n,1607n,1609n,1613n,1619n,1621n,1627n,1637n,1657n,1663n,1667n,1669n,1693n,1697n,1699n,1709n,1721n,1723n,1733n,1741n,1747n,1753n,1759n,1777n,1783n,1787n,1789n,1801n,1811n,1823n,1831n,1847n,1861n,1867n,1871n,1873n,1877n,1879n,1889n,1901n,1907n,1913n,1931n,1933n,1949n,1951n,1973n,1979n,1987n,1993n,1997n,1999n,2003n,2011n,2017n,2027n,2029n,2039n,2053n,2063n,2069n,2081n,2083n,2087n,2089n,2099n,2111n,2113n,2129n,2131n,2137n,2141n,2143n,2153n,2161n,2179n,2203n,2207n,2213n,2221n,2237n,2239n,2243n,2251n,2267n,2269n,2273n,2281n,2287n,2293n,2297n,2309n];
    let prime_d = [1n,13n,17n,19n,23n,29n,31n,37n,41n,43n,47n,53n,59n,61n,67n,71n,73n,79n,83n,89n,97n,101n,103n,107n,109n,113n,127n,131n,137n,139n,149n,151n,157n,163n,167n,169n,173n,179n,181n,191n,193n,197n,199n,211n,221n,223n,227n,229n,233n,239n,241n,247n,251n,257n,263n,269n,271n,277n,281n,283n,289n,293n,299n,307n,311n,313n,317n,323n,331n,337n,347n,349n,353n,359n,361n,367n,373n,377n,379n,383n,389n,391n,397n,401n,403n,409n,419n,421n,431n,433n,437n,439n,443n,449n,457n,461n,463n,467n,479n,481n,487n,491n,493n,499n,503n,509n,521n,523n,527n,529n,533n,541n,547n,551n,557n,559n,563n,569n,571n,577n,587n,589n,593n,599n,601n,607n,611n,613n,617n,619n,629n,631n,641n,643n,647n,653n,659n,661n,667n,673n,677n,683n,689n,691n,697n,701n,703n,709n,713n,719n,727n,731n,733n,739n,743n,751n,757n,761n,767n,769n,773n,779n,787n,793n,797n,799n,809n,811n,817n,821n,823n,827n,829n,839n,841n,851n,853n,857n,859n,863n,871n,877n,881n,883n,887n,893n,899n,901n,907n,911n,919n,923n,929n,937n,941n,943n,947n,949n,953n,961n,967n,971n,977n,983n,989n,991n,997n,1003n,1007n,1009n,1013n,1019n,1021n,1027n,1031n,1033n,1037n,1039n,1049n,1051n,1061n,1063n,1069n,1073n,1079n,1081n,1087n,1091n,1093n,1097n,1103n,1109n,1117n,1121n,1123n,1129n,1139n,1147n,1151n,1153n,1157n,1159n,1163n,1171n,1181n,1187n,1189n,1193n,1201n,1207n,1213n,1217n,1219n,1223n,1229n,1231n,1237n,1241n,1247n,1249n,1259n,1261n,1271n,1273n,1277n,1279n,1283n,1289n,1291n,1297n,1301n,1303n,1307n,1313n,1319n,1321n,1327n,1333n,1339n,1343n,1349n,1357n,1361n,1363n,1367n,1369n,1373n,1381n,1387n,1391n,1399n,1403n,1409n,1411n,1417n,1423n,1427n,1429n,1433n,1439n,1447n,1451n,1453n,1457n,1459n,1469n,1471n,1481n,1483n,1487n,1489n,1493n,1499n,1501n,1511n,1513n,1517n,1523n,1531n,1537n,1541n,1543n,1549n,1553n,1559n,1567n,1571n,1577n,1579n,1583n,1591n,1597n,1601n,1607n,1609n,1613n,1619n,1621n,1627n,1633n,1637n,1643n,1649n,1651n,1657n,1663n,1667n,1669n,1679n,1681n,1691n,1693n,1697n,1699n,1703n,1709n,1711n,1717n,1721n,1723n,1733n,1739n,1741n,1747n,1751n,1753n,1759n,1763n,1769n,1777n,1781n,1783n,1787n,1789n,1801n,1807n,1811n,1817n,1819n,1823n,1829n,1831n,1843n,1847n,1849n,1853n,1861n,1867n,1871n,1873n,1877n,1879n,1889n,1891n,1901n,1907n,1909n,1913n,1919n,1921n,1927n,1931n,1933n,1937n,1943n,1949n,1951n,1957n,1961n,1963n,1973n,1979n,1987n,1993n,1997n,1999n,2003n,2011n,2017n,2021n,2027n,2029n,2033n,2039n,2041n,2047n,2053n,2059n,2063n,2069n,2071n,2077n,2081n,2083n,2087n,2089n,2099n,2111n,2113n,2117n,2119n,2129n,2131n,2137n,2141n,2143n,2147n,2153n,2159n,2161n,2171n,2173n,2179n,2183n,2197n,2201n,2203n,2207n,2209n,2213n,2221n,2227n,2231n,2237n,2239n,2243n,2249n,2251n,2257n,2263n,2267n,2269n,2273n,2279n,2281n,2287n,2291n,2293n,2297n,2309n];
    for (let i = threadId; i < 335; i += max) {
        if (num == prime[i]) { return true }
        if (num % prime[i] == 0n) { return prime[i] }
    };
    for (let u = threadId; u < 480; u += max) {
      for (let l = 2310n; (l + prime_d[u]) * (l + prime_d[u]) <= n; l += 2310n) {
        if (num % (l + prime_d[u]) == 0n) { return (l + prime_d[u]) };
      }
    };
    return true;
}
